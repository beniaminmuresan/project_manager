# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/project_tasks', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # ProjectTask. As you add validations to ProjectTask, be sure to
  # adjust the attributes here as well.

  let!(:project) { FactoryBot.create(:project) }
  let(:valid_attributes) do
    {
      title: 'New project task',
      body: 'New project task body',
      project_id: project.id
    }
  end

  let(:invalid_attributes) do
    {
      title: '',
      body: ''
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      ProjectTask.create! valid_attributes
      get project_project_tasks_url(project)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      project_task = ProjectTask.create! valid_attributes
      get project_project_task_path(project, project_task)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_project_project_task_url(project)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      project_task = ProjectTask.create! valid_attributes
      get edit_project_project_task_path(project, project_task)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new ProjectTask' do
        expect do
          post project_project_tasks_url(project_id: project.id), params: { project_task: valid_attributes }
        end.to change(ProjectTask, :count).by(1)
      end

      it 'redirects to the created project_task' do
        post project_project_tasks_url(project_id: project.id), params: { project_task: valid_attributes }
        expect(response).to redirect_to(project_project_task_path(project, ProjectTask.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new ProjectTask' do
        expect do
          post project_project_tasks_url(project_id: project), params: { project_task: invalid_attributes }
        end.to change(ProjectTask, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post project_project_tasks_url(project_id: project), params: { project_task: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'New title',
          body: 'New body'
        }
      end

      it 'updates the requested project_task' do
        project_task = ProjectTask.create! valid_attributes
        patch project_project_task_path(project, project_task),
              params: { project_task: new_attributes }
        project_task.reload
        expect(project_task.attributes.values).to include(*new_attributes.values)
      end

      it 'redirects to the project_task' do
        project_task = ProjectTask.create! valid_attributes
        patch project_project_task_path(project, project_task),
              params: { project_task: new_attributes }
        project_task.reload
        expect(response).to redirect_to(project_project_task_url(project, project_task))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        project_task = ProjectTask.create! valid_attributes
        patch project_project_task_path(project, project_task),
              params: { project_task: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested project_task' do
      project_task = ProjectTask.create! valid_attributes
      expect do
        delete project_project_task_path(project, project_task)
      end.to change(ProjectTask, :count).by(-1)
    end

    it 'redirects to the project_tasks list' do
      project_task = ProjectTask.create! valid_attributes
      delete project_project_task_path(project, project_task)
      expect(response).to redirect_to(project_project_tasks_url(project_id: project.id))
    end
  end
end
